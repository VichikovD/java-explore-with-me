package ru.yandex.practicum.event.service.impl;

import lombok.RequiredArgsConstructor;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Service;
import ru.yandex.practicum.StatisticClient;
import ru.yandex.practicum.category.Category;
import ru.yandex.practicum.category.CategoryRepository;
import ru.yandex.practicum.event.model.Event;
import ru.yandex.practicum.event.model.Location;
import ru.yandex.practicum.event.model.PublishState;
import ru.yandex.practicum.event.model.dto.EventCreateDto;
import ru.yandex.practicum.event.model.dto.EventFullInfoDto;
import ru.yandex.practicum.event.model.dto.EventShortInfoDto;
import ru.yandex.practicum.event.model.dto.EventUpdateDto;
import ru.yandex.practicum.event.model.mapper.EventMapper;
import ru.yandex.practicum.event.repository.EventRepository;
import ru.yandex.practicum.event.repository.LocationRepository;
import ru.yandex.practicum.event.service.EventServicePrivate;
import ru.yandex.practicum.eventRequest.EventRequestRepository;
import ru.yandex.practicum.eventRequest.model.EventRequestStatus;
import ru.yandex.practicum.exception.NotFoundException;
import ru.yandex.practicum.user.User;
import ru.yandex.practicum.user.UserRepository;

import java.time.LocalDateTime;
import java.util.List;

@Service
@RequiredArgsConstructor
public class EventServicePrivateImpl implements EventServicePrivate {
    final EventRepository eventRepository;
    final EventRequestRepository eventRequestRepository;
    final UserRepository userRepository;
    final CategoryRepository categoryRepository;
    final LocationRepository locationRepository;
    final StatisticClient statisticClient;

    @Override
    public EventFullInfoDto create(long initiatorId, EventCreateDto eventCreateDto) {
        Location location = eventCreateDto.getLocation();
        long categoryId = eventCreateDto.getCategory();

        Location locationWithId = locationRepository.save(location);
        User initiator = userRepository.findById(initiatorId)
                .orElseThrow(() -> new NotFoundException("User with id=" + initiatorId + " was not found"));
        Category category = categoryRepository.findById(categoryId)
                .orElseThrow(() -> new NotFoundException("Category with id=" + categoryId + " was not found"));


        eventCreateDto.setLocation(locationWithId);
        Event eventToCreate = EventMapper.requestDtoToModel(eventCreateDto, category, initiator);
        Event eventCreated = eventRepository.save(eventToCreate);
        EventFullInfoDto eventFullInfoDto = EventMapper.toFullInfoDto(eventCreated);

        // eventFullInfoDto + views + (confirmedRequests and if limit reached -> rest requests rejected!)
        eventFullInfoDto.setConfirmedRequests(0);
        eventFullInfoDto.setViews(0);
        return eventFullInfoDto;
    }

    @Override
    public EventFullInfoDto updateAsInitiator(long initiatorId, long eventId, EventUpdateDto eventUpdateDto) {
        userRepository.findById(initiatorId)
                .orElseThrow(() -> new NotFoundException("User with id=" + initiatorId + " was not found"));
        Event event = eventRepository.findById(eventId)
                .orElseThrow(() -> new NotFoundException("Event with id=" + eventId + " was not found"));

        PublishState eventState = event.getState();
        if (eventState != PublishState.PENDING && eventState != PublishState.REJECTED && eventState != PublishState.CANCELED) {
            throw new DataIntegrityViolationException("Only pending, rejected or canceled events can be changed");
        }

        Long categoryId = eventUpdateDto.getCategory();
        Category category = null;
        if (categoryId != null) {
            category = categoryRepository.findById(categoryId)
                    .orElseThrow(() -> new NotFoundException("Category with id=" + categoryId + " was not found"));
        }

        LocalDateTime eventDate = eventUpdateDto.getEventDate();
        if (eventDate != null) {
            if (eventDate.isBefore(LocalDateTime.now().plusHours(2))) {
                throw new DataIntegrityViolationException("Field: eventDate. Error: Must contain time at least 2 hours ahead of now");
            }
        }

        Location location = eventUpdateDto.getLocation();
        if (location != null) {
            location.setLocationId(null);  // just in case user gave id (but we want it to be generated by DB)
            location = locationRepository.save(location);
        }

        PublishState.StateAction stateAction = eventUpdateDto.getStateAction();
        if (stateAction != null) {
            if (!(stateAction.equals(PublishState.StateAction.SEND_TO_REVIEW) && (eventState.equals(PublishState.REJECTED) /*|| eventState.equals(PublishState.CANCELED)*/)) &&
                    !(stateAction.equals(PublishState.StateAction.CANCEL_REVIEW) && eventState.equals(PublishState.PENDING))) {
                throw new DataIntegrityViolationException("Forbidden action: " + stateAction + ". Event is not in the right state: " + eventState.name());
            }
        }

        EventMapper.updateModelWithRequestAdminDtoNotNullFields(event, eventUpdateDto, category, location);
        Event eventUpdated = eventRepository.save(event);
        EventFullInfoDto eventFullInfoDto = EventMapper.toFullInfoDto(eventUpdated);

        long confirmedRequests = eventRequestRepository.countByEventIdAndStatus(eventId, EventRequestStatus.CONFIRMED);
        eventFullInfoDto.setConfirmedRequests(confirmedRequests);
        // setViews TODO
        return eventFullInfoDto;
    }

    @Override
    public List<EventShortInfoDto> getByInitiatorIdFiltered(long initiatorId, Pageable pageable) {
        // В спецификации написано только "В случае, если по заданным фильтрам не найдено ни одного события, возвращает пустой список"
        // про валидацию id не написано, но мне кажется, она здесь нужна
        userRepository.findById(initiatorId)
                .orElseThrow(() -> new NotFoundException("User with id=" + initiatorId + " was not found"));

        List<Event> eventList = eventRepository.findAllByInitiatorId(initiatorId, pageable);
        List<EventShortInfoDto> eventShortInfoDtoList = EventMapper.modelListToShortInfoDtoList(eventList);
        // Всем событиям добавить просмотры и подтвержденные запросы на участие \/
        /*
        setConfirmedRequestsToAll(eventShortInfoDtoList);
        setViewsToAll(eventShortInfoDtoList); TODO
        */
        return eventShortInfoDtoList;
    }

    @Override
    public EventFullInfoDto getByIdAndInitiatorId(long initiatorId, long eventId) {
        Event event = eventRepository.findByIdAndInitiatorId(eventId, initiatorId)
                .orElseThrow(() -> new NotFoundException("Event with id=" + eventId + " was not found for initiator with id=" + initiatorId));
        EventFullInfoDto eventFullInfoDto = EventMapper.toFullInfoDto(event);

        long confirmedRequests = eventRequestRepository.countByEventIdAndStatus(eventId, EventRequestStatus.CONFIRMED);
        eventFullInfoDto.setConfirmedRequests(confirmedRequests);
        eventFullInfoDto.setViews(-1); /*TODO*/
        return eventFullInfoDto;
        // Обратите внимание:\n- событие должно быть опубликовано - информация о событии должна включать в себя
        // количество просмотров и количество подтвержденных запросов - информацию о том, что по этому эндпоинту был осуществлен
        // и обработан запрос, нужно сохранить в сервисе статистики В случае, если события с заданным id не найдено, возвращает статус код 404
    }
}
